{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["rarities","App","selectedRarities","setSelectedRarities","useState","apiResults","setApiResults","error","setError","loading","setLoading","formatNumber","number","Intl","NumberFormat","format","handleCheckboxChange","event","value","target","prevState","includes","filter","item","satScore","calculateSatScore","S","A","F","S_max","Math","pow","logS_max","log","logS","logF","n_total","n_365","n_seq","React","createElement","className","map","rarity","key","type","id","onChange","htmlFor","onClick","handleQueryClick","length","query","join","apiUrl","concat","fetch","then","response","json","data","message","catch","console","finally","role","n_mined","n_epoch","n_inscribed","n_seq_holders","n_total_holders","Date","updated_at","toLocaleString","toFixed","style","fontSize","fontFamily","lineHeight","display","alignItems","flexDirection","margin","borderTop","padding","href","rel","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.948327e3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst rarities = [\n  \"2009\", \"uncommon\", \"rare\", \"epic\", \"black_uncommon\", \"black_rare\",\n  \"black_epic\", \"palindrome\", \"jan2009\", \"vintage\", \"nakamoto\", \"pizza\", \n  \"jpeg\", \"hitman\", \"silkroad\", \"alpha\", \"omega\", \"1_digit\", \"2_digits\", \n  \"3_digits\", \"perfect_palinception\", \"uniform_palinception\", \"rodarmor\", \n  \"450x\", \"block_9\", \"block_78\", \"block_286\", \"block_666\", \"fibonacci\", \n  \"sequence_palindrome\", \"legacy\", \"paliblock\"\n];\n\nconst App = () => {\n  const [selectedRarities, setSelectedRarities] = useState([]);\n  const [apiResults, setApiResults] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  // Format numbers for readability\n  const formatNumber = (number) => {\n    return new Intl.NumberFormat('en-US').format(number);\n  };\n\n  // Calculate Sat score\n  const calculateSatScore = (S, A, F) => {\n    const S_max = 2.1 * Math.pow(10, 15); // 2.1 quadrillion\n    const logS_max = Math.log(S_max);\n    const logS = Math.log(S);\n    const logF = Math.log(F);\n    const logA = Math.log(A);\n\n    // Calculate score using the formula\n    const score = 1000 * (1 - (logS / logS_max) * (logA / logS) * (logF / logS));\n    return score;\n  };\n\n  const handleCheckboxChange = (event) => {\n    const value = event.target.value;\n    setSelectedRarities((prevState) => {\n      if (prevState.includes(value)) {\n        return prevState.filter((item) => item !== value);\n      } else {\n        return [...prevState, value];\n      }\n    });\n  };\n\n  const handleQueryClick = () => {\n    if (selectedRarities.length === 0) {\n      setError(\"Please select at least one rarity.\");\n      return;\n    }\n\n    const query = selectedRarities.join(\",\");\n    const apiUrl = `https://api.deezy.io/v1/sat-hunting/circulation?rarity=${query}`;\n    \n    setLoading(true);\n\n    fetch(apiUrl)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.message) {\n          setError(data.message);\n          setApiResults(null);\n        } else {\n          setApiResults(data.data);\n          setError(null);\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n        setError(\"An error occurred while fetching data.\");\n        setApiResults(null);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  // Calculate score only if apiResults is available\n  const satScore = apiResults ? calculateSatScore(apiResults.n_total, apiResults.n_365, apiResults.n_seq) : null;\n\n  return (\n    <div className=\"container mt-5\">\n      <h1 className=\"text-center mb-4\">Select Rarities</h1>\n      <div className=\"row mb-3\">\n        <div className=\"col-12\">\n          <form>\n            {rarities.map((rarity) => (\n              <div key={rarity} className=\"form-check form-check-inline\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"checkbox\"\n                  id={rarity}\n                  value={rarity}\n                  onChange={handleCheckboxChange}\n                />\n                <label className=\"form-check-label\" htmlFor={rarity}>\n                  {rarity}\n                </label>\n              </div>\n            ))}\n          </form>\n        </div>\n      </div>\n      <div className=\"text-center mb-4\">\n        <button className=\"btn btn-primary\" onClick={handleQueryClick}>\n          Query\n        </button>\n      </div>\n\n      {loading && (\n        <div className=\"text-center\">\n          <div className=\"spinner-border text-primary\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n          </div>\n        </div>\n      )}\n\n      {error && (\n        <div className=\"alert alert-danger\">\n          <strong>Error:</strong> {error}\n        </div>\n      )}\n\n      {apiResults && (\n        <div className=\"mt-4\">\n          <h2 className=\"mb-4\">Results</h2>\n          <div className=\"list-group\">\n            <p className=\"list-group-item\"><strong>Total:</strong> {formatNumber(apiResults.n_total)}</p>\n            <p className=\"list-group-item\"><strong>Mined:</strong> {formatNumber(apiResults.n_mined)}</p>\n            <p className=\"list-group-item\"><strong>Epoch:</strong> {formatNumber(apiResults.n_epoch)}</p>\n            <p className=\"list-group-item\"><strong>365 Days:</strong> {formatNumber(apiResults.n_365)}</p>\n            <p className=\"list-group-item\"><strong>Found:</strong> {formatNumber(apiResults.n_seq)}</p>\n            <p className=\"list-group-item\"><strong>Inscribed:</strong> {formatNumber(apiResults.n_inscribed)}</p>\n            <p className=\"list-group-item\"><strong>Found Holders:</strong> {formatNumber(apiResults.n_seq_holders)}</p>\n            <p className=\"list-group-item\"><strong>Total Holders:</strong> {formatNumber(apiResults.n_total_holders)}</p>\n            <p className=\"list-group-item\"><strong>Updated At:</strong> {new Date(apiResults.updated_at).toLocaleString()}</p>\n          </div>\n        </div>\n      )}\n\n      {/* Display Sat Score if available */}\n      {satScore !== null && (\n        <div className=\"mt-4\">\n          <h3>Sat Score: {satScore.toFixed(2)}</h3>\n          <p><strong>What is the Sat Score?</strong></p>\n          <p>The <strong>Sat score</strong> is a unique metric (created by AI) that gives you a numerical representation of the relative position and significance of a given set of data. It is calculated using three factors from the data:</p>\n          <ul>\n            <li><strong>Smax</strong> - The total number of sats.</li>\n            <li><strong>S (n_total)</strong> - The total number of selected sats.</li>\n            <li><strong>A (n_365)</strong> - The number of sats active over the past 365 days.</li>\n            <li><strong>F (n_seq)</strong> - The number of sats that are found.</li>\n          </ul>\n          <p><strong>Why is it useful?</strong></p>\n          <p>The Sat score helps users quickly gauge the rarity and significance of specific data points without having to manually interpret large sets of numbers. By looking at the Sat score, you can get a clearer sense of how valuable or noteworthy an item might be, especially when comparing multiple items.</p>\n          \n          <p><strong>Formula:</strong></p>\n          <div style={{ fontSize: '1.2rem', fontFamily: 'Courier, monospace', lineHeight: '1.6' }}>\n            1000 × ( 1 - \n            <span style={{ display: 'inline-flex', alignItems: 'center' }}>\n              <span style={{ display: 'inline-flex', flexDirection: 'column', alignItems: 'center', margin: '0 5px' }}>\n                <div>log(S)</div>\n                <div style={{ borderTop: '1px solid black', padding: '0 5px' }}>log(S<sub>max</sub>)</div>\n              </span>\n              ×\n              <span style={{ display: 'inline-flex', flexDirection: 'column', alignItems: 'center', margin: '0 5px' }}>\n                <div>log(A)</div>\n                <div style={{ borderTop: '1px solid black', padding: '0 5px' }}>log(S)</div>\n              </span>\n              ×\n              <span style={{ display: 'inline-flex', flexDirection: 'column', alignItems: 'center', margin: '0 5px' }}>\n                <div>log(F)</div>\n                <div style={{ borderTop: '1px solid black', padding: '0 5px' }}>log(S)</div>\n              </span>\n            </span>\n            )\n          </div>\n\n          <p><strong>Disclaimer:</strong> Please note that the Sat score is an <strong>arbitrary</strong> calculation based on the dataset, and its value can change as the data updates or as new factors are added to the formula. It is not a definitive or static measure of value but rather a tool to assist in understanding the relative importance of items within the dataset.</p>\n        </div>\n      )}\n\n      {/* Legal Disclaimer */}\n      <footer className=\"mt-5 text-center text-muted\">\n        <p><small><strong>Disclaimer:</strong> This page uses data provided by the API at <a href=\"https://api.deezy.io\" target=\"_blank\" rel=\"noopener noreferrer\">https://api.deezy.io</a>. The data is provided \"as is,\" and the creator of this page does not profit from its usage. <strong>It is not financial advice. Use the data at your own risk.</strong></small></p>\n      </footer>\n      \n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}